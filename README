==================
Nexa Prerequisites
==================

Setting Up Cassandra
--------------------

Prerequisites:
The latest version of Java 8, either the Oracle Java Standard Edition 8 or OpenJDK 8. For using cqlsh, the latest version of Python 2.7.

Installation:
Follow below instructions to install via your Linux distribution's package manager

Debian based distros (Ubuntu/etc.)
sudo apt-get install cassandra

Arch Linux & derivatives
Install the cassandra package from the User Repository, using your favorite AUR helper.

Configuration:
"Edit section data_file_directories to reflect below, where 'repo' is ideally mounted on an exclusive drive/SSD. The reduces IO contention b/w Neo4j and Cassandra databases. Also ensure the folders have the writer permissions enabled."

data_file_directories: /<repo>/lib/cassandra/data
commitlog_directory: /repo/lib/cassandra/commitlog
listen_address: localhost

"Also tweak the below settings appropriately per the instructions provided in the config file. The below sample values are good for a 12 core machine"

concurrent_reads: 32
concurrent_writes: 96
concurrent_counter_writes: 32

"To facilitate the highly concurrent application, its advisable to make the following system configurations, it primarily is meant to help Cassandra operate at its best."

/etc/limits.conf
* - memlock unlimited
* - nofile 100000
* - nproc 32768
* - as unlimited
/etc/sysctl.conf
vm.max_map_count = 1048575

Setting Up Neo4j
----------------

Installation:
Recommend following official prerequisite & install instructions as below - https://neo4j.com/docs/operations-manual/current/installation/linux/

Note:
- Only Neo4j version "3.5.x" is officially supported. The packaged Neo4j driver does NOT support versions 4.x.x.
- If Neo4j demands Java 10/11 proceed installing the same, it can typically co-exist with Java8 (Cassandra dependency) without causing an issue.

Install the Neo4j community edition package from the User Repository, using your favorite AUR helper. Subsequently you can configure running it via systemd per instructions here

Configuration:
"Add the following at the bottom of the file /etc/neo4j/neo4j.conf" dbms.connector.bolt.thread_pool_min_size=20
dbms.connector.bolt.thread_pool_max_size=1024
dbms.connector.bolt.thread_pool_keep_alive=5m

Other packages:
---------------

Using the appropriate package manager for your Linux distribution install the below packages. For example on Arch variants run,

sudo pacman -S libsecp256k1
sudo pacman -S leveldb


=============
Nexa Installation
=============

Download the pre-compiled binary (available for a few popular Linux distributions) from https://www.xoken.org/nexa/download/ and unzip contents at an appropriate directory of your choice.

Note: It should work fine on the popular Linux distributions. If you are out of luck, please follow instructions on the same web-page to compile from source.

The Xoken Nexa server can be started as below.

$ xoken-node 

The program sources configurable parameters from two different config files, as below:

- node-config.yaml: Contains all the general Nexa node, Bitcoin P2P & listen endpoint related configurations.
- arivi-config.yaml: Contains all the Arivi P2P related configurations (typically autogenerated)


Configure:
---------
Place the node-config.yaml (provided in the release) in the same directory as the xoken-nexa executable. Typically you will need to update the following parameters.

- bitcoinNodeListenIP
- bitcoinNodeListenPort
- endPointTLSListenIP
- endPointTLSListenPort
- tlsCertificatePath
- tlsKeyfilePath
- tlsCertificateStorePath

The rest are mostly tuning related parameters and meant for advanced users.

Backup keys:
Once the server has started successfully, open the newly generated arivi-config.yaml file and safely backup the application generated secret key. This is essential to restore the unique identity of your node, since nodes maintain the reputation of their peers.

e.g.
secretKey: d670be193389c79349edd8ea4194925609f39cbeffc59b78fc1b4d431c0ebac

To keep processes running even after exiting the shell or terminal, you can use the nohup command or can configure it as a systemd service and use below template to execute as a daemon service.

sudo systemctl <start|stop> <node-service-name>




